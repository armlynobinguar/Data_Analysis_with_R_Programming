library(readr)
# Heads up that the following instruction can generate a column specification warnings, you can ignore that.
# These warnings are related to that `readr` has misguidedly guessed the type of values in the column `Pool QC`. 
# To avoid this warning we can manually specify the type of this column the `col_types` parameter.
houses  <-  read_tsv('AmesHousing_1.txt', col_types = cols(`Pool QC` = col_character()))
library(dplyr)

sale_price_range <- houses %>%
    group_by(`Yr Sold`) %>%
    summarize(range_by_year = max(SalePrice) - min(SalePrice))

one  <-  FALSE
two  <-  TRUE

C  <-  c(1,1,1,1,1,1,1,1,1,21)
average_distance <- function(vector) {
    distances  <-  vector - mean(vector)
    sum(distances) / length(distances)
}

avg_distance  <-  average_distance(C)

C  <-  c(1,1,1,1,1,1,1,1,1,21)

#average_distance <- function(vector) {
#    distances  <-  vector - mean(vector)
#    sum(distances) / length(distances)
#}
mean_absolute_deviation <- function(vector) {
    distances  <-  abs(vector - mean(vector)) #we only add abs function here
    sum(distances) / length(distances)
}

mad  <-  mean_absolute_deviation(C)

library(dplyr)

standard_deviation <- function(vector) {
    distances  <-  (vector - mean(vector))**2 #we only need to compute the squared distances here
    sqrt(sum(distances) / length(distances))
}
# Measure first the variability for each year
houses_years_std <- houses %>%
    group_by(`Yr Sold`) %>%
    summarize(st_dev = standard_deviation(SalePrice)) %>%
    arrange(st_dev)

# Get years of max and min variability
greatest_variability  <-  houses_years_std %>%
  filter(st_dev == max(st_dev)) %>% 
  pull(`Yr Sold`)

lowest_variability  <-  houses_years_std %>%
  filter(st_dev == min(st_dev)) %>% 
  pull(`Yr Sold`)


C  <-  c(1,1,1,1,1,1,1,1,1,21)

#average_distance <- function(vector) {
#    distances  <-  vector - mean(vector)
#    sum(distances) / length(distances)
#}
mean_absolute_deviation <- function(vector) {
    distances  <-  abs(vector - mean(vector)) #we only add abs function here
    sum(distances) / length(distances)
}

mad  <-  mean_absolute_deviation(C)

C  <-  c(1,1,1,1,1,1,1,1,1,21)

#mean_absolute_deviation <- function(vector) {
#    distances  <-  abs(vector - mean(vector))
#    sum(distances) / length(distances)
#}
variance <- function(vector) {
    distances  <-  (vector - mean(vector))**2 #we only need to compute the squared distances here
    sum(distances) / length(distances)
}

variance_C  <-  variance(C)
